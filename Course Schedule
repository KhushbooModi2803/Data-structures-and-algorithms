class Solution {
 
    bool dfs(int node, vector<int> adj[], vector<int>& vis, vector<int>& dfsVis) {
        vis[node] = 1;
        dfsVis[node] = 1;
        
        for (auto it : adj[node]) {
            if (!vis[it]) {
                if (dfs(it, adj, vis, dfsVis)) return true;
            } else if (dfsVis[it]) {
                return true;
            }
        }
        
        dfsVis[node] = 0;
        return false;
    }

public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int> adj[numCourses];
        for (auto& pre : prerequisites) {
            adj[pre[1]].push_back(pre[0]);
        }
        
        vector<int> vis(numCourses, 0);
        vector<int> dfsVis(numCourses, 0);
        
        for (int i = 0; i < numCourses; i++) {
            if (!vis[i]) {
                if (dfs(i, adj, vis, dfsVis)) return false;
            }
        }
        
        return true;
    }
};
