#include <bits/stdc++.h>
using namespace std;

vector<int> safeNodes(vector<vector<int>>& edges, int n, int e) {
    vector<vector<int>> graph(n);
    vector<vector<int>> reverseGraph(n);
    vector<int> outdegree(n, 0);
    
    // Build the graph and reverse graph
    for (const auto& edge : edges) {
        graph[edge[0]].push_back(edge[1]);
        reverseGraph[edge[1]].push_back(edge[0]);
        outdegree[edge[0]]++;
    }
    
    // Queue for nodes with outdegree 0 (terminal nodes)
    queue<int> q;
    for (int i = 0; i < n; ++i) {
        if (outdegree[i] == 0) {
            q.push(i);
        }
    }
    
    vector<bool> safe(n, false);
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        safe[node] = true;
        
        for (int neighbor : reverseGraph[node]) {
            if (--outdegree[neighbor] == 0) {
                q.push(neighbor);
            }
        }
    }
    
    // Collect all safe nodes
    vector<int> result;
    for (int i = 0; i < n; ++i) {
        if (safe[i]) {
            result.push_back(i);
        }
    }
    
    sort(result.begin(), result.end());
    return result;
}
