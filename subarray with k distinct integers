class Solution {
public:

 int atMostK(vector<int>& nums, int k) {
        int l = 0, r = 0, cnt = 0;
        unordered_map<int, int> mpp;

        for (r = 0; r < nums.size(); ++r) {
            if (mpp[nums[r]]++ == 0) k--; // New unique element
            while (k < 0) { // Shrink the window
                if (--mpp[nums[l]] == 0) k++;
                l++;
            }
            cnt += r - l + 1; // Add the count of subarrays
        }
        
        return cnt;
    }
    int subarraysWithKDistinct(vector<int>& nums, int k) {
   return atMostK(nums, k) - atMostK(nums, k - 1);
    }
};
